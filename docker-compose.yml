volumes:
  n8n_data:
  qdrant_data:
  postgres_data:

x-n8n: &service-n8n
  image: n8nio/n8n
  environment:
    - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_REINSTALL_MISSING_PACKAGES=true
    - N8N_HOST=0.0.0.0
    - N8N_PORT=5678
    - N8N_PROTOCOL=http
    - N8N_DIAGNOSTICS_ENABLED=false

    # database
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=postgres
    - DB_POSTGRESDB_USER=n8n
    - DB_POSTGRESDB_PASSWORD=n8n
    - DB_TYPE=postgresdb

    # security
    - EXECUTIONS_DATA_PRUNE=true
    - EXECUTIONS_DATA_MAX_AGE=168
    - EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000
    - EXECUTIONS_TIMEOUT_MAX=7200

    # runners
    - N8N_RUNNERS_ENABLED=true

    # queue
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_BULL_REDIS_PORT=6379
    - WEBHOOK_URL=https://n.g86.xyz

services:
  n8n:
    <<: *service-n8n
    restart: unless-stopped
    container_name: n8n
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n

  n8n-worker:
    <<: *service-n8n
    command: worker
    restart: always
    depends_on:
      - n8n
      
  postgres:
    image: postgres:alpine
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
     - POSTGRES_USER=n8n
     - POSTGRES_PASSWORD=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=http://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage

  cloudflared:
    image: cloudflare/cloudflared:latest
    depends_on:
      - n8n
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
